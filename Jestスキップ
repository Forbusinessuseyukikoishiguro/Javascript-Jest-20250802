Jestでテストをスキップする方法について、詳しく解説しますね！テスト開発中によく使う便利な機能です。Jestでテストをスキップする完全ガイドを作成しました！🚀

## 🎯 主なスキップ方法

### **⏭️ 基本的なスキップ**
```javascript
test.skip('このテストはスキップ', () => {});
describe.skip('このグループはスキップ', () => {});
```

### **⚡ 短縮記法**
```javascript
xit('x付きでスキップ', () => {});
xtest('xtest でスキップ', () => {});
xdescribe('xdescribe でグループスキップ', () => {});
```

### **🔄 条件付きスキップ**
```javascript
// 環境に応じてスキップ
(process.env.NODE_ENV === 'test' ? test : test.skip)('環境依存テスト', () => {});
```

## 💡 実践的な使い方

### **開発中によくあるパターン**
- `test.skip('TODO: まだ実装していない機能', () => {})` 
- `test.skip('BUG-123: バグ修正待ち', () => {})`
- `test.skip('FLAKY: 不安定なテスト', () => {})`

### **VS Code での活用**
1. **開発中の機能** → `test.skip` で一時的にスキップ
2. **バグのあるテスト** → チケット番号付きでスキップ
3. **時間のかかるテスト** → 環境変数でスキップ制御

### **テスト結果の確認**
```
Tests: 5 passed, 2 skipped, 7 total
○ skipped 累乗機能（未実装） (2 tests)
```

## 🎮 実際に試してみよう！

先ほどの `jest-practice` プロジェクトで以下を試してみてください：

```javascript
// calculator.test.js に追加
describe('スキップの練習', () => {
  test('実行されるテスト', () => {
    expect(1 + 1).toBe(2);
  });
  
  test.skip('スキップされるテスト', () => {
    expect(1 + 1).toBe(3); // 失敗するが実行されない
  });
  
  xit('短縮記法でスキップ', () => {
    expect(true).toBe(false); // これも実行されない
  });
});
```

テストを実行すると、スキップされたテストが `○ skipped` として表示されます！

## 🚨 注意点

- **理由を明記** → なぜスキップしているかコメントに記載
- **一時的なスキップ** → 日付やチケット番号を付ける
- **定期的な見直し** → スキップしたテストを定期的にチェック

スキップ機能を使いこなせば、効率的にテスト開発を進められますよ！何か具体的な使い方で困ったら、いつでも聞いてくださいね。😊

ーーーーーーーーーーーーーーーーーーーーーーーーー



// Jest テストスキップ完全ガイド
// テストをスキップする様々な方法と使い分け

// ======================
// 1. 基本的なスキップ方法
// ======================

describe('計算機能のテスト', () => {
  
  // ✅ 実行される通常のテスト
  test('足し算が正しく動作する', () => {
    expect(2 + 3).toBe(5);
  });

  // ⏭️ test.skip() - 個別のテストをスキップ
  test.skip('引き算が正しく動作する', () => {
    // このテストは実行されない
    expect(5 - 3).toBe(2);
  });

  // ⏭️ it.skip() - test.skip()と同じ機能
  it.skip('掛け算が正しく動作する', () => {
    // このテストも実行されない
    expect(3 * 4).toBe(12);
  });
});

// ======================
// 2. テストグループのスキップ
// ======================

// ⏭️ describe.skip() - テストグループ全体をスキップ
describe.skip('データベース機能のテスト（未実装）', () => {
  // この describe 内の全てのテストがスキップされる
  
  test('ユーザーを保存できる', () => {
    // 実行されない
  });
  
  test('ユーザーを検索できる', () => {
    // 実行されない
  });
  
  test('ユーザーを削除できる', () => {
    // 実行されない
  });
});

// ======================
// 3. 短縮記法（xで始める）
// ======================

describe('短縮記法の例', () => {
  
  // ⏭️ xit() = it.skip() の短縮形
  xit('短縮記法でスキップ1', () => {
    expect(true).toBe(false);
  });
  
  // ⏭️ xtest() = test.skip() の短縮形
  xtest('短縮記法でスキップ2', () => {
    expect(1).toBe(2);
  });
});

// ⏭️ xdescribe() = describe.skip() の短縮形
xdescribe('短縮記法でグループスキップ', () => {
  test('このテストは実行されない1', () => {
    // スキップされる
  });
  
  test('このテストは実行されない2', () => {
    // スキップされる
  });
});

// ======================
// 4. 条件付きスキップ
// ======================

describe('条件付きスキップの例', () => {
  
  // 環境変数に基づくスキップ
  const shouldRunIntegrationTests = process.env.NODE_ENV === 'integration';
  
  // 条件によってスキップを決定
  (shouldRunIntegrationTests ? test : test.skip)('統合テスト', () => {
    // NODE_ENV=integration の時のみ実行
    expect('integration logic').toBeDefined();
  });

  // プラットフォーム依存のテスト
  const isWindows = process.platform === 'win32';
  
  (isWindows ? test.skip : test)('Unix系OSでのみ実行', () => {
    // Windows以外でのみ実行
    expect('/usr/local').toBeDefined();
  });

  // より読みやすい条件付きスキップ
  if (process.env.SKIP_SLOW_TESTS === 'true') {
    test.skip('時間のかかるテスト（スキップ中）', () => {
      // SKIP_SLOW_TESTS=true の時はスキップ
    });
  } else {
    test('時間のかかるテスト', async () => {
      // 通常時は実行
      await new Promise(resolve => setTimeout(resolve, 1000));
      expect(true).toBe(true);
    });
  }
});

// ======================
// 5. 開発中のスキップパターン
// ======================

describe('開発中によくあるスキップパターン', () => {
  
  // 🚧 実装予定の機能
  test.skip('TODO: ファイルアップロード機能', () => {
    // まだ実装していない機能のテスト
    // 後で実装する予定
  });
  
  // 🐛 既知のバグで一時的にスキップ
  test.skip('BUG-123: ログイン機能のバグ修正待ち', () => {
    // バグが修正されるまで一時的にスキップ
    // チケット番号を記載すると管理しやすい
  });
  
  // ⚠️ 不安定なテスト（フレーキーテスト）
  test.skip('FLAKY: タイミング依存のテスト', () => {
    // 時々失敗するテストを一時的にスキップ
    // 原因を調査中
  });
  
  // 🔧 リファクタリング予定
  test.skip('REFACTOR: 古いAPIのテスト', () => {
    // 新しいAPIに移行予定なので一時スキップ
  });
});

// ======================
// 6. 実際の使用例：電卓アプリ
// ======================

// テスト対象の関数（例）
const calculator = {
  add: (a, b) => a + b,
  subtract: (a, b) => a - b,
  multiply: (a, b) => a * b,
  divide: (a, b) => {
    if (b === 0) throw new Error('Division by zero');
    return a / b;
  },
  // まだ実装していない機能
  power: (base, exponent) => {
    throw new Error('Not implemented yet');
  }
};

describe('Calculator クラス', () => {
  
  // ✅ 実装済み機能のテスト
  test('足し算', () => {
    expect(calculator.add(2, 3)).toBe(5);
  });
  
  test('引き算', () => {
    expect(calculator.subtract(10, 4)).toBe(6);
  });
  
  test('掛け算', () => {
    expect(calculator.multiply(3, 4)).toBe(12);
  });
  
  test('割り算', () => {
    expect(calculator.divide(10, 2)).toBe(5);
  });
  
  test('ゼロ除算エラー', () => {
    expect(() => calculator.divide(10, 0)).toThrow('Division by zero');
  });
  
  // ⏭️ 未実装機能は一時的にスキップ
  describe.skip('累乗機能（未実装）', () => {
    test('2の3乗は8', () => {
      expect(calculator.power(2, 3)).toBe(8);
    });
    
    test('負の指数', () => {
      expect(calculator.power(2, -1)).toBe(0.5);
    });
  });
});

// ======================
// 7. 動的スキップ（テスト実行中の判定）
// ======================

describe('動的スキップの例', () => {
  
  test('ブラウザ環境でのみ実行', () => {
    // Node.js環境ではスキップ
    if (typeof window === 'undefined') {
      return test.skip();
    }
    
    // ブラウザ環境でのテスト
    expect(window.location).toBeDefined();
  });
  
  test('特定のNodeバージョンでのみ実行', () => {
    const nodeVersion = process.version;
    const majorVersion = parseInt(nodeVersion.slice(1).split('.')[0]);
    
    if (majorVersion < 16) {
      return test.skip('Node.js 16以上が必要');
    }
    
    // Node.js 16以上でのテスト
    expect(majorVersion).toBeGreaterThanOrEqual(16);
  });
});

// ======================
// 8. スキップ情報の確認方法
// ======================

/*
テスト実行時の出力例：

 PASS  ./calculator.test.js
  Calculator クラス
    ✓ 足し算 (2ms)
    ✓ 引き算 (1ms)
    ✓ 掛け算
    ✓ 割り算
    ✓ ゼロ除算エラー (1ms)
    ○ skipped 累乗機能（未実装） (2 tests)

Test Suites: 1 passed, 1 total
Tests:       5 passed, 2 skipped, 7 total
Snapshots:   0 total
Time:        0.123s

スキップされたテストは「○ skipped」と表示される
*/

// ======================
// 9. スキップのベストプラクティス
// ======================

describe('スキップのベストプラクティス', () => {
  
  // ✅ GOOD: スキップ理由を明記
  test.skip('TODO: OAuth認証（Issue #123）', () => {
    // チケット番号や理由を記載
  });
  
  // ✅ GOOD: 一時的なスキップには日付を記載
  test.skip('2024-12-07: サーバーメンテナンス中のため一時スキップ', () => {
    // いつまでスキップするかが分かる
  });
  
  // ❌ BAD: 理由不明のスキップ
  test.skip('適当にスキップ', () => {
    // なぜスキップしているかが不明
  });
  
  // ✅ GOOD: 条件付きスキップは環境変数を使用
  const isCI = process.env.CI === 'true';
  
  (!isCI ? test : test.skip)('ローカル環境でのみ実行', () => {
    // CI環境ではスキップ、ローカルでは実行
  });
});

// ======================
// 10. package.json でのテスト実行オプション
// ======================

/*
package.json の例：

{
  "scripts": {
    "test": "jest",
    "test:skip-slow": "SKIP_SLOW_TESTS=true jest",
    "test:integration": "NODE_ENV=integration jest",
    "test:all": "jest --passWithNoTests",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage"
  }
}

実行例：
npm run test              // 全テスト実行
npm run test:skip-slow    // 時間のかかるテストをスキップ
npm run test:integration  // 統合テストのみ実行
*/
